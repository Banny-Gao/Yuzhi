// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios'

import type {
  AuthControllerRegisterData,
  AuthControllerRegisterResponse,
  AuthControllerLoginData,
  AuthControllerLoginResponse,
  AuthControllerSmsLoginData,
  AuthControllerSmsLoginResponse,
  AuthControllerRefreshTokensData,
  AuthControllerRefreshTokensResponse,
  AuthControllerLogoutData,
  AuthControllerLogoutResponse,
  AuthControllerGetProfileData,
  AuthControllerGetProfileResponse,
  SolarTermsControllerGetSolarTermsData,
  SolarTermsControllerGetSolarTermsResponse,
  CorsControllerGetAllowedOriginsData,
  CorsControllerGetAllowedOriginsResponse,
  CorsControllerAddOriginsData,
  CorsControllerAddOriginsResponse,
  CorsControllerRemoveOriginData,
  CorsControllerRemoveOriginResponse,
  CorsControllerAddOriginData,
  CorsControllerAddOriginResponse,
  CorsControllerIsOriginAllowedData,
  CorsControllerIsOriginAllowedResponse,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * 用户注册
 */
export const authControllerRegister = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerRegisterData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AuthControllerRegisterResponse,
    unknown,
    ThrowOnError
  >({
    url: '/auth/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * 用户登录
 */
export const authControllerLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerLoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<AuthControllerLoginResponse, unknown, ThrowOnError>(
    {
      url: '/auth/login',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    }
  )
}

/**
 * 短信验证码登录
 */
export const authControllerSmsLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerSmsLoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AuthControllerSmsLoginResponse,
    unknown,
    ThrowOnError
  >({
    url: '/auth/sms-login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * 刷新访问令牌
 */
export const authControllerRefreshTokens = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerRefreshTokensData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthControllerRefreshTokensResponse,
    unknown,
    ThrowOnError
  >({
    url: '/auth/refresh',
    ...options,
  })
}

/**
 * 用户退出登录
 */
export const authControllerLogout = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerLogoutData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthControllerLogoutResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/logout',
    ...options,
  })
}

/**
 * 获取当前用户信息
 */
export const authControllerGetProfile = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerGetProfileData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthControllerGetProfileResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/auth/profile',
    ...options,
  })
}

/**
 * 获取二十四节气
 */
export const solarTermsControllerGetSolarTerms = <ThrowOnError extends boolean = false>(
  options?: Options<SolarTermsControllerGetSolarTermsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    SolarTermsControllerGetSolarTermsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/calendar/solar-terms',
    ...options,
  })
}

/**
 * 获取CORS白名单列表
 */
export const corsControllerGetAllowedOrigins = <ThrowOnError extends boolean = false>(
  options?: Options<CorsControllerGetAllowedOriginsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    CorsControllerGetAllowedOriginsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/system/cors/origins',
    ...options,
  })
}

/**
 * 批量添加域名到CORS白名单
 */
export const corsControllerAddOrigins = <ThrowOnError extends boolean = false>(
  options: Options<CorsControllerAddOriginsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CorsControllerAddOriginsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/system/cors/origins',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * 从CORS白名单移除域名
 */
export const corsControllerRemoveOrigin = <ThrowOnError extends boolean = false>(
  options: Options<CorsControllerRemoveOriginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    CorsControllerRemoveOriginResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/system/cors/origin',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * 添加域名到CORS白名单
 */
export const corsControllerAddOrigin = <ThrowOnError extends boolean = false>(
  options: Options<CorsControllerAddOriginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CorsControllerAddOriginResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/system/cors/origin',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * 检查Origin是否在CORS白名单中
 */
export const corsControllerIsOriginAllowed = <ThrowOnError extends boolean = false>(
  options: Options<CorsControllerIsOriginAllowedData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    CorsControllerIsOriginAllowedResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/system/cors/origins/check/{origin}',
    ...options,
  })
}
